# Github Actions에 표시될 이름
name: FMD-CI/CD

# Event Trigger
on:
  push:
    branches:
      - main
      - develop
      - 74-ci-fix-1
  pull_request:
    branches: 
      - main
      - develop
      - 74-ci-fix-1

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest

    steps:
    # Jdk Setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
  # 공통 사용 profile 생성
    # application-common.yaml 생성
    - name: make application-common.yaml
      run: |
        cd ./src/main/resources
        touch ./application-common.yaml
        echo "${{ secrets.APPLICATION_COMMON}}" > ./application-common.yaml

    # application-oauth.yaml 생성
    - name: make application-oauth.yaml
      run: |
        cd ./src/main/resources
        touch ./application-oauth.yaml
        echo "${{ secrets.APPLICATION_OAUTH}}" > ./application-oauth.yaml

  # 운영(prod), 개발(dev) profile 생성
    # application-prod.yaml 생성
    - name: make application-prod.yaml
      # main 브랜치 일때
      if: contains(github.ref, 'main') 
      run: |
        cd ./src/main/resources
        touch ./application-prod.yaml
        echo "${{ secrets.APPLICATION_PROD}}" > ./application-prod.yaml
        
    # application-dev.yaml 생성
    - name: make application-dev.yaml
      # develop 브랜치 일때
      if: contains(github.ref, 'develop') 
      run: |
        cd ./src/main/resources
        touch ./application-dev.yaml
        echo "${{ secrets.APPLICATION_DEV}}" > ./application-dev.yaml

    # application-fix.yaml 생성
    - name: make application-fix.yaml
      # develop 브랜치 일때
      if: contains(github.ref, '74-ci-fix-1')
      run: |
        cd ./src/main/resources
        touch ./application-dev.yaml
        echo "${{ secrets.APPLICATION_FIX}}" > ./application-fix.yaml
    
    # Gradlew 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # Gradlew 빌드
    - name: Build with Gradle
      run: ./gradlew build -x test

  # Docker 빌드 & 푸쉬
    # Prod
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_USERNAME }}/fmd-prod .
        docker push ${{ secrets.DOCKER_USERNAME }}/fmd-prod
        
    # Dev
    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/fmd-dev:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/fmd-dev:latest

    # Fix
    - name: Docker build & push to fix
      if: contains(github.ref, '74-ci-fix-1')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/fmd-fix:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/fmd-fix:latest

  # Deploy
    # Prod
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          docker rm -f $(docker ps -qa)
          docker pull ${{ secrets.DOCKER_USERNAME }}/fmd-prod:latest
          docker-compose -f docker-compose.prod.yaml up -d
          docker image prune -a -f

    # Dev
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          docker rm -f $(docker ps -qa)
          docker pull ${{ secrets.DOCKER_USERNAME }}/fmd-dev:latest
          docker-compose -f docker-compose.dev.yaml up -d
          docker image prune -a -f

    # Fix
    - name: Deploy to fix
      uses: appleboy/ssh-action@master
      id: deploy-fix
      if: contains(github.ref, '74-ci-fix-1')
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/fmd-fix:latest
          docker stop $(docker ps -a -q)
          docker-compose -f docker-compose.dev.yaml up -d
          docker rm $(docker ps --filter 'status=exited' -a -q)
          docker image prune -a -f